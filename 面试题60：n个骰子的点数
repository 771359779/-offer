public class DicesProbability {
     
 
    private static final int maxValue = 6;
 
    /**
     * 方法一：递归解法
     */
    public static void printProbability1(int number) {
        if(number<=0)
            return;  //错误
        int[] probabilities = new int[maxValue*number-number+1];
        //下标为i，对应的值代表点数之和为i+number总共出现的情况次数
        //点数从number~maxValue*number，所以数组大小为6*number-number+1
        for(int i=0;i<probabilities.length;i++)
            probabilities[i]=0;
         
        //计算不同点数出现的次数
        for(int i=1;i<=maxValue;i++)
            calP(probabilities,number,number-1,i);  //第一次掷骰子，总点数只能是1~maxValue(即6)
         
        int totalP = (int) Math.pow(maxValue, number);  //所有情况总共出现的次数
        for( int i=0;i<probabilities.length ;i++) {
            double ratio = (double)probabilities[i]/totalP;
            NumberFormat format = NumberFormat.getPercentInstance();
            format.setMaximumFractionDigits(2);//设置保留几位小数
            System.out.println("点数和为"+(i+number)+"的概率为:"+format.format(ratio));
        }
    }
     
    /**
     * 计算每种点数出现的次数
     * @param number:骰子总个数
     * @param curNumber:当前剩余骰子个数
     * @param sum:各个骰子加起来的总点数
     */
    private static void calP(int[] probabilities, int number, int curNumber, int sum) {
        if(curNumber==0) {
            probabilities[sum-number]++; //总数为sum的情况存放在sum-number下标中
            return;
        }
        for(int i=1;i<=maxValue;i++)
            calP(probabilities, number, curNumber-1, sum+i);  //相当于剩余的骰子少一个，总点数增加。
    }
